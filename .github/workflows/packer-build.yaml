name: Packer AMI Build

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_KEY_ID }}
          aws-region: us-east-1

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: Create webapp.zip
        run: |
          mkdir -p packer-template
          zip -r webapp.zip . -x ".git" "packer-template/" ".github/"
          mv webapp.zip packer-template/

      - name: Move necessary files to packer-template
        run: |
          mv my-app.service packer-template/
          mv packer/install_webapp.sh packer-template/
          mv packer/test.pkr.hcl packer-template/

      - name: List repository contents
        run: |
          echo "Root directory contents:"
          ls -la
          echo "packer-template directory contents:"
          ls -la packer-template

      - name: Check necessary files
        run: |
          for file in webapp.zip my-app.service install_webapp.sh test.pkr.hcl; do
            if [ ! -f "packer-template/$file" ]; then
              echo "$file not found in packer-template directory"
              echo "Current directory structure:"
              find . -type f
              exit 1
            fi
          done

      - name: Create variables file
        run: |
          cat << EOF > packer-template/variables.pkrvars.hcl
          aws_region = "us-east-1"
          instance_type = "t2.small"
          ssh_username = "ubuntu"
          source_ami = "ami-0cad6ee50670e3d0e"
          subnet_id = "subnet-07b381b768fd0c9b4"
          EOF

      - name: Initialize Packer
        run: packer init ./packer-template/test.pkr.hcl

      - name: Validate Packer Template
        run: |
          cd packer-template
          packer validate -var-file=variables.pkrvars.hcl \
            test.pkr.hcl

      - name: Build AMI
        run: |
          cd packer-template
          # Run packer build and capture output
          AMI_OUTPUT=$(packer build -debug -var-file=variables.pkrvars.hcl test.pkr.hcl)
          echo "$AMI_OUTPUT"  # Print output for debugging
          # Extract the AMI ID from the output
          AMI_ID=$(echo "$AMI_OUTPUT" | grep -oE 'ami-[a-zA-Z0-9]{17}')
          if [[ -z "$AMI_ID" ]]; then
            echo "Failed to capture AMI ID."
            exit 1
          fi
          echo "Captured AMI_ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV  # Store AMI ID as an environment variable
          
      #Set up the AWS ACCOUNT
      - name: SET UP AWS CLI 
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_KEY_ID }}
            aws-region: us-east-1

      #List files after aws cli setup
      - name: List the files after the setup
        run: |
          ls -l #list files to verify setup is correct or not

      - name: Install jq
        run: sudo apt-get install -y jq

      #check packer manifest and set AMI ID from manifest
      # - name: Checking packer manifest and set AMI ID from manifest
      #   run: |
      #       cd packer #naviagte to the packer directory
      #       cat manifest.json #Display the content of the packer manifest file
      #       AMI_ID=$(jq -r '.builds[-1].artifact_id | split(":") | .[1]' manifest.json)
      #       echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV #Set the AMI_ID as env variables
      #       echo "AMI_ID set to: $AMI_ID" #Verify that the value is correctly set

      #Verify AMI_ID before moving ahead
      - name: Verify AMI_ID is correctly set
        run: |
            echo "Verifying AMI_ID: ${{ env.AMI_ID }}"
            if [[ -z "${{ env.AMI_ID }}" ]]; then
              echo "AMI ID is not correctly set. Exiting."
              exit 1
            fi
        
      # Step: Create New Launch Template Version
      - name: Create New Launch Template Version
        run: |
          echo "Using AMI_ID: ${{ env.AMI_ID }}"
          # Get the latest version of the launch template
          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-name csye6225_asg \
            --query 'LaunchTemplates[0].LatestVersionNumber' --output text)
          echo "Cloning from Launch Template Version: $LATEST_VERSION"
          
          # Create a new version of the launch template with the updated AMI
          aws ec2 create-launch-template-version \
            --launch-template-name csye6225_asg \
            --source-version "$LATEST_VERSION" \
            --version-description "New version with latest AMI" \
            --launch-template-data "{\"ImageId\": \"${{ env.AMI_ID }}\"}"
          ls -l #Verify directory contents after launch template version create-launch-template-version


      - name: Update ASG with latest template version
        run: |
            echo "Using AMI_ID: ${{ env.AMI_ID }}"
            #Fetch the latest version number of the launch template
            VERSION=$(aws ec2 describe-launch-templates \
              --launch-template-name csye6225_asg \
              --query 'LaunchTemplates[0].LatestVersionNumber' --output text)
            echo "Latest Launch Template Version: $VERSION"
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name csye6225_asg \
              --launch-template "LaunchTemplateName=csye6225_asg,Version=$VERSION"


      - name: Start Instance refresh and monitor
        run: |
            REFRESH_ID=$(aws autoscaling start-instance-refresh \
              --auto-scaling-group-name csye6225_asg \
              --query 'InstanceRefreshId' \
              --output text)
            echo "Started instance refresh with ID $REFRESH_ID"
            ls -l #List files to confirm the setup before entering the monitor
            while true; do
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name csye6225_asg \
                --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" \
                --output text)

              echo "Current refresh status: $STATUS"
              if [[ "$STATUS" == "Successful" ]]; then
                echo "Instance refresh completed successfully."
                exit 0
              elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                echo "Instance refresh failed or was Cancelled"
                exit 1
              else
                echo "Instance refresh in progress. Checking again in 30 seconds..."
                sleep 30
              fi
            done 

            
